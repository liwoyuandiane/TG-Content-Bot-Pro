From c778640a5ac124fb298c11ef016cca4c76fec70b Mon Sep 17 00:00:00 2001
From: liwoyuandiane <liwoyuandiane@example.com>
Date: Sun, 19 Oct 2025 14:14:55 +0000
Subject: [PATCH] =?UTF-8?q?=E6=94=AF=E6=8C=81=20Alpine=E3=80=81Ubuntu?=
 =?UTF-8?q?=E3=80=81Debian=E3=80=81CentOS=20=E7=AD=89=E5=B8=B8=E7=94=A8=20?=
 =?UTF-8?q?Linux=20=E7=B3=BB=E7=BB=9F=E8=87=AA=E5=8A=A8=E8=AF=86=E5=88=AB?=
 =?UTF-8?q?=E5=92=8C=E8=BF=90=E8=A1=8C?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

1. 修改 install.sh 脚本，增加对 Alpine Linux、Arch Linux、openSUSE 等系统的支持

2. 添加系统检测功能，自动识别不同 Linux 发行版并使用相应的包管理器

3. 优化虚拟环境创建逻辑，确保在 Alpine Linux 上也能正常工作

4. 修改 start.sh 脚本，增加系统类型检测功能

5. 更新 AGENTS.md 文档，提供更准确的开发指导
---
 AGENTS.md  | 44 +++++++++++++++------------
 install.sh | 89 ++++++++++++++++++++++++++++++++++++++++++++++++++++--
 start.sh   | 39 ++++++++++++++++++++++++
 3 files changed, 150 insertions(+), 22 deletions(-)

diff --git a/AGENTS.md b/AGENTS.md
index 9b8ebcf..aa646bd 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -12,19 +12,19 @@ SaveRestrictedContentBot (TG-Content-Bot-Pro) is a Telegram bot for cloning mess
 
 ```bash
 # Using Docker (recommended)
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 docker-compose up -d
 docker-compose logs -f
 
 # Manual deployment
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 python3 -m venv venv
 source venv/bin/activate
 pip install -r requirements.txt
 python3 -m main
 
 # Using start script
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 ./start.sh
 ```
 
@@ -32,15 +32,15 @@ cd SaveRestrictedContentBot
 
 ```bash
 # Generate Pyrogram session string (interactive)
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 python3 get_session.py
 
 # Initialize database
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 python3 init_database.py
 
 # Run installation script
-cd SaveRestrictedContentBot
+cd TG-Content-Bot-Pro
 bash install.sh
 ```
 
@@ -85,16 +85,23 @@ Plugins auto-load from `main/plugins/` directory:
 - `main/core/plugin_manager.py` dynamically imports each plugin
 - Plugins register event handlers using decorators from Telethon/Pyrogram
 
+Key plugin files:
+- `message_handler.py` - Handles message link processing
+- `batch.py` - Implements batch download functionality
+- `auth_commands.py` - Authentication-related commands
+- `traffic_commands.py` - Traffic monitoring commands
+- `session_commands.py` - Session management commands
+
 ### Core Message Flow
 
-1. User sends message link → `frontend.py` or `start.py` handles request
-2. Link parsing → `helpers.py:get_link()` extracts chat_id and msg_id
-3. Message retrieval → `pyroplug.py:get_msg()` downloads from source channel
-4. Traffic check → `database.py:check_traffic_limit()` validates user quota
+1. User sends message link → `message_handler.py` processes the request
+2. Link parsing → `utils/media_utils.py:get_link()` extracts chat_id and msg_id
+3. Message retrieval → `services/download_service.py:download_message()` downloads from source channel
+4. Traffic check → `services/traffic_service.py:check_traffic_limit()` validates user quota
 5. Upload to user → Uses Pyrogram or Telethon depending on media type/size
 6. Cleanup → Downloaded files are removed after upload
 
-### File Upload Strategy (`main/plugins/pyroplug.py:get_msg()`)
+### File Upload Strategy (`main/services/download_service.py`)
 
 Implements fallback logic:
 - Tries Pyrogram upload first
@@ -114,7 +121,7 @@ Implements fallback logic:
 - **settings**: traffic limit configuration
 - **sessions**: encrypted user session storage
 
-### Task Queue & Rate Limiting (`main/core/task_queue.py`, `main/core/rate_limiter.py`)
+### Task Queue & Rate Limiting (`main/services/download_task_manager.py`, `main/core/rate_limiter.py`)
 
 Three-component system:
 1. **TaskQueue**: Async queue with configurable concurrent workers for parallel processing
@@ -128,7 +135,7 @@ Three-component system:
 
 ### Message Link Formats
 
-Supports (`main/plugins/helpers.py`):
+Supports (`utils/media_utils.py`):
 - Public channels: `t.me/channel/msgid`
 - Private channels: `t.me/c/chatid/msgid`
 - Bot channels: `t.me/b/chatid/msgid`
@@ -165,9 +172,9 @@ Default limits (configurable via `/setlimit`):
 - Single file limit: 100MB
 - Enabled by default
 
-Traffic is checked before each download (`main/plugins/pyroplug.py`):
+Traffic is checked before each download (`services/download_service.py`):
 - Gets file size from message metadata
-- Calls `db.check_traffic_limit(sender, file_size)`
+- Calls `traffic_service.check_traffic_limit(sender, file_size)`
 - Rejects download if over quota with informative message
 - Records traffic on successful upload
 
@@ -226,12 +233,11 @@ main/
 │   ├── clients.py       # Telegram client management
 │   ├── database.py      # Database operations
 │   ├── plugin_manager.py # Plugin loading system
-│   ├── task_queue.py    # Task queue implementation
-│   └── rate_limiter.py  # Rate limiting logic
+│   └── base_plugin.py   # Base plugin class
 ├── plugins/             # Bot command plugins
-│   ├── frontend.py      # Message handling
+│   ├── message_handler.py # Message link processing
 │   ├── batch.py         # Batch download functionality
-│   ├── pyroplug.py      # Message retrieval and upload
+│   ├── auth_commands.py # Authentication commands
 │   └── ...              # Other command handlers
 ├── services/            # Business logic services
 ├── utils/               # Utility functions
diff --git a/install.sh b/install.sh
index 88b7d7f..0ab8533 100755
--- a/install.sh
+++ b/install.sh
@@ -180,13 +180,73 @@ check_dependencies() {
                 [Yy]* ) 
                     print_info "正在安装依赖..."
                     
-                    # 检测包管理器
+                    # 检测包管理器和系统类型
                     if command_exists apt; then
+                        print_info "检测到基于 Debian/Ubuntu 的系统"
                         sudo apt update && sudo apt install -y ${missing_packages[*]}
                     elif command_exists dnf; then
+                        print_info "检测到基于 Fedora/RHEL 的系统"
                         sudo dnf install -y ${missing_packages[*]}
                     elif command_exists yum; then
+                        print_info "检测到基于 CentOS/RHEL 的系统"
                         sudo yum install -y ${missing_packages[*]}
+                    elif command_exists apk; then
+                        print_info "检测到 Alpine Linux 系统"
+                        # Alpine Linux 需要特殊处理包名
+                        alpine_packages=()
+                        for pkg in "${missing_packages[@]}"; do
+                            case $pkg in
+                                "python3")
+                                    alpine_packages+=("python3")
+                                    ;;
+                                "python3-pip")
+                                    alpine_packages+=("py3-pip")
+                                    ;;
+                                "python3-venv")
+                                    alpine_packages+=("python3-dev")
+                                    ;;
+                                "git")
+                                    alpine_packages+=("git")
+                                    ;;
+                                "ffmpeg")
+                                    alpine_packages+=("ffmpeg")
+                                    ;;
+                                *)
+                                    alpine_packages+=("$pkg")
+                                    ;;
+                            esac
+                        done
+                        sudo apk update && sudo apk add --no-cache ${alpine_packages[*]}
+                    elif command_exists pacman; then
+                        print_info "检测到 Arch Linux 系统"
+                        # Arch Linux 需要特殊处理包名
+                        arch_packages=()
+                        for pkg in "${missing_packages[@]}"; do
+                            case $pkg in
+                                "python3")
+                                    arch_packages+=("python")
+                                    ;;
+                                "python3-pip")
+                                    arch_packages+=("python-pip")
+                                    ;;
+                                "python3-venv")
+                                    arch_packages+=("python")
+                                    ;;
+                                "git")
+                                    arch_packages+=("git")
+                                    ;;
+                                "ffmpeg")
+                                    arch_packages+=("ffmpeg")
+                                    ;;
+                                *)
+                                    arch_packages+=("$pkg")
+                                    ;;
+                            esac
+                        done
+                        sudo pacman -Sy --noconfirm ${arch_packages[*]}
+                    elif command_exists zypper; then
+                        print_info "检测到 openSUSE 系统"
+                        sudo zypper refresh && sudo zypper install -y ${missing_packages[*]}
                     else
                         print_error "不支持的包管理器，请手动安装: ${missing_packages[*]}"
                         exit 1
@@ -241,6 +301,13 @@ clone_repository() {
 setup_python_environment() {
     print_step "设置 Python 环境"
     
+    # 检查系统类型以进行特殊处理
+    local is_alpine=false
+    if command_exists apk; then
+        is_alpine=true
+        print_info "检测到 Alpine Linux 系统"
+    fi
+    
     # 检查是否已存在虚拟环境
     if [ -d "venv" ]; then
         print_info "检测到已存在的虚拟环境"
@@ -261,14 +328,30 @@ setup_python_environment() {
         else
             print_warning "虚拟环境损坏，重新创建..."
             rm -rf venv
-            python3 -m venv venv
+            if [ "$is_alpine" = true ]; then
+                # Alpine Linux 需要特殊处理
+                python3 -m venv venv --without-pip
+                source venv/bin/activate
+                # 在 Alpine 上重新安装 pip
+                curl -sSL https://bootstrap.pypa.io/get-pip.py | python3
+            else
+                python3 -m venv venv
+            fi
             source venv/bin/activate
             pip install --upgrade pip >/dev/null 2>&1
             pip install -r requirements.txt
         fi
     else
         print_info "创建新的虚拟环境..."
-        python3 -m venv venv
+        if [ "$is_alpine" = true ]; then
+            # Alpine Linux 需要特殊处理
+            python3 -m venv venv --without-pip
+            source venv/bin/activate
+            # 在 Alpine 上重新安装 pip
+            curl -sSL https://bootstrap.pypa.io/get-pip.py | python3
+        else
+            python3 -m venv venv
+        fi
         source venv/bin/activate
         pip install --upgrade pip >/dev/null 2>&1
         pip install -r requirements.txt
diff --git a/start.sh b/start.sh
index 8c2182b..12e080f 100755
--- a/start.sh
+++ b/start.sh
@@ -112,6 +112,42 @@ check_env_variables() {
     return 0
 }
 
+# 检测系统类型
+detect_system() {
+    print_info "检测系统类型"
+    
+    if [ -f /etc/os-release ]; then
+        . /etc/os-release
+        OS=$NAME
+        VER=$VERSION_ID
+        print_success "系统: $OS $VER"
+    elif command_exists lsb_release; then
+        OS=$(lsb_release -si)
+        VER=$(lsb_release -sr)
+        print_success "系统: $OS $VER"
+    elif [ -f /etc/lsb-release ]; then
+        . /etc/lsb-release
+        OS=$DISTRIB_ID
+        VER=$DISTRIB_RELEASE
+        print_success "系统: $OS $VER"
+    elif [ -f /etc/debian_version ]; then
+        OS=Debian
+        VER=$(cat /etc/debian_version)
+        print_success "系统: $OS $VER"
+    elif [ -f /etc/redhat-release ]; then
+        OS=$(cat /etc/redhat-release | cut -d' ' -f1)
+        print_success "系统: $OS"
+    elif command_exists apk; then
+        OS=Alpine
+        VER=$(cat /etc/alpine-release 2>/dev/null || echo "unknown")
+        print_success "系统: $OS $VER"
+    else
+        OS=$(uname -s)
+        VER=$(uname -r)
+        print_warning "未知系统: $OS $VER"
+    fi
+}
+
 # 测试 MongoDB 连接
 test_mongodb_connection() {
     print_info "测试 MongoDB 连接"
@@ -163,6 +199,9 @@ main() {
     echo -e "${BLUE}╚════════════════════════════════════════════════╝${NC}"
     echo ""
     
+    # 检测系统类型
+    detect_system
+    
     # 检查环境变量
     if ! check_env_variables; then
         exit 1
-- 
2.43.0

